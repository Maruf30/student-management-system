1. php artisan make:model Role -m
2. php artisan make:middleware CheckRole
3. php artisan make:middleware Authen

4. Delete previous _create_users_table.php
5. php artisan make:migration create_users_table --create=users

  $table->integer('role_id')->unsigned();
  $table->foreign('role_id')->references('id')->on('roles');
  $table->string('name');
  $table->string('username');
  $table->string('email')->unsigned();
  $table->string('password');
  $table->rememberToken();
  $table->boolean('active');

6. 2017_06_08_001911_create_roles_table.php

  $table->string('name');


7.Role.php

class Role extends Model
{
  protected $table = 'roles';
  protected $fillable = ['name'];
  protected $primaryKey = 'id';
  public $timestamps = false;

  public function users()
  {
    return $this->hasMany('App\User','role_id','id');
  }
}

8.User.php

protected $fillable = [
  'name','username','email','password','active','role_id'
];
public function role()
{
  return $this->hasOne('App\Role','id','role_id');
}
private function checkIfUserHasRole($need_role)
{
  return (strtolower($need_role) == strtolower($this->role->name)) ? true : null;
}
public function hasRole($roles)
{
     if(is_array($roles))
     {
      foreach($roles as $need_role)
      {
        if($this->checkIfUserHasRole($need_role))
        {
          return true;
        }
      }
     }else{
      return $this->checkIfUserHasRole($need_role);
     }
     return false;
}

09. php artisan make:seeder UsersTableSeeder
10. php artisan make:seeder RolesTableSeeder

11. UsersTableSeeder.php
   App\User;
   User::create([
     'name'     => 'parvez',
     'username' => 'parvez46',
     'email'    => 'p4alam@gmail.com',
     'password' => bcrypt('secret'),
     'remember_token' => str_random(10),
     'active'   => '1',
     'role_id'  => rand(1,5),
   ]);

12. RolesTableSeeder.php
  App\Role;
  Role::insert([
    ['name' => 'Admin'],
    ['name' => 'CEO'],
    ['name' => 'Manager'],
    ['name' => 'Team Member'],
  ]);

  [N.B: ::insert() means array data and ::create means string(single) data]

13. php artisan db:seed --class=RolesTableSeeder
14. php artisan db:seed --class=UsersTableSeeder
15. php artisan db:seed

16. CheckRole.php

  public function handle($request, Closure $next)
  {
      $roles = $this->getRequiredRoleForRoute($request->route());
      if ($request->user()->hasRole($roles) || !$roles) {

        return $next($request);
      }
      return redirect('/nopermission');
  }

  private function getRequiredRoleForRoute($route)
  {
    $actions = $route->getAction();

    return isset($actions['roles']) ? $actions['roles'] : null;
  }


17. Authen.php

    use Illuminate\Support\Facades\Auth;

    public function handle($request, Closure $next, $guard = 'web')
    {
        if(!Auth::guard($guard)->check()){

          return redirect('/');
        }

        return $next($request);
    }


18. Karnel.php

    protected $routeMiddleware = [
      'roles' => \App\Http\Middleware\CheckRole::class,
      'authen' => \App\Http\Middleware\Authen::class,
    ];


19. php artisan make:auth
20. php artisan make:controller LoginController
21. php artisan make:controller DashboardController

22. LoginController.php

<?php

  namespace App\Http\Controllers;

  use App\Http\Controllers\Controller;
  use Illuminate\Foundation\Auth\AuthenticatesUsers;
  use Illuminate\Http\Request;
  use Auth;

  class LoginController extends Controller
  {
    use AuthenticatesUsers;

    protected $username = 'username';
    protected $redirectTo = '/admin';
    protected $guard = 'web';

    public function getLogin()
    {
      if ( Auth::guard('web')->check()) {

        return redirect()->route('dashboard');
      }
      return view('login');
    }

    public function postLogin(Request $request)
    {
      $auth = Auth::guard('web')->attemp([
        'username' => $request->username,
        'password' => $request->password,
        'active'   => 1,
      ]);

      if ($auth) {
        return redirect()->route('dashboard');
      }
      return redirect()->route('/');
    }

    public function getLogout()
    {
      Auth::guard('web')->logout();
      return redirect()->route('/');

    }

  }


22. DashboardController.php

    public function __construct()
    {
      return $this->middleware('web');
    }

    public function dashboard()
    {
      return view('admin.index');
    }


23. web.php

    Route::get('/nopermission', function(){
      return view('layouts.nopermission');
    });

    Route::group(['middleware' => ['authen']], function(){
      Route::get('/admin', [
        'as'    => 'dashboard',
        'uses'  => 'DashboardController@dashboard'
      ]);
    });
    
    // Admin
    Route::group(['middleware' => ['authen','roles'], 'roles' => ['admin']], function(){

    });

24.
